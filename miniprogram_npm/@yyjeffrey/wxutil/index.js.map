{"version":3,"sources":["wxutil.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\n * @author: Jeffrey\n */\n\n// 兼容uni-app\nif (typeof uni !== 'undefined') {\n  wx = uni\n}\n\n/**\n * request用法：\n * 1.request.get(url).then(res => {}).catch(error => {})\n * 2.request.post(url, data = {}, header = {}).then(res => {}).catch(error => {})\n * 3.request.put(url, data = {}, header = {}).then(res => {}).catch(error => {})\n * 4.request.delete(url, data = {}, header = {}).then(res => {}).catch(error => {})\n * @param {String} url\n * @param {JSON Object} data\n * @param {JSON Object} header\n * @param {Boolean} showLoading\n */\nconst request = {\n  get(url, data = {}, header = {}, showLoading = true) {\n    const handler = { url, data, header }\n    return this.Request('GET', handler, showLoading)\n  },\n\n  post(url, data = {}, header = {}, showLoading = true) {\n    const handler = { url, data, header }\n    return this.Request('POST', handler, showLoading)\n  },\n\n  put(url, data = {}, header = {}, showLoading = true) {\n    const handler = { url, data, header }\n    return this.Request('PUT', handler, showLoading)\n  },\n\n  delete(url, data = {}, header = {}, showLoading = true) {\n    const handler = { url, data, header }\n    return this.Request('DELETE', handler, showLoading)\n  },\n\n  // RequestHandler\n  Request(method, handler, showLoading) {\n    const { url, data, header } = handler\n    let head = {\n      'content-type': 'application/json'\n    }\n    if (getApp().getHeader) {\n      const appHeader = getApp().getHeader()\n      head = Object.assign(head, appHeader)\n    }\n    if (showLoading) {\n      wx.showNavigationBarLoading()\n    }\n    return new Promise((resolve, reject) => {\n      wx.request({\n        url: url,\n        data: data,\n        header: Object.assign(head, header),\n        method:\n          ['GET', 'POST', 'PUT', 'DELETE'].indexOf(method) > -1\n            ? method\n            : 'GET',\n        success: res => {\n          if (getApp().gotoAuthPage) {\n            getApp().gotoAuthPage(res.data)\n          }\n          resolve(res.data)\n        },\n        fail: error => {\n          reject(error)\n        },\n        complete() {\n          wx.hideNavigationBarLoading()\n        }\n      })\n    })\n  }\n}\n\n/**\n * file用法：\n * 1.file.download(url).then(res => {})\n * 2.file.upload({url: url, fileKey: fileKey, filePath: filePath, data: {}, header: {}}).then(res => {})\n * @param {JSON Object} handler\n */\nconst file = {\n  download(handler) {\n    if (typeof handler === 'string') {\n      handler = {\n        url: String(handler)\n      }\n    }\n    const { url, filePath, header } = handler\n    return new Promise((resolve, reject) => {\n      let head = {}\n      if (getApp().getHeader) {\n        const appHeader = getApp().getHeader()\n        head = Object.assign(head, appHeader)\n      }\n      wx.showNavigationBarLoading()\n      wx.downloadFile({\n        url: url,\n        filePath: filePath,\n        header: Object.assign(head, header),\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        },\n        complete() {\n          wx.hideNavigationBarLoading()\n        }\n      })\n    })\n  },\n\n  upload(handler) {\n    const { url, fileKey, filePath, data, header } = handler\n    return new Promise((resolve, reject) => {\n      let head = {}\n      if (getApp().getHeader) {\n        const appHeader = getApp().getHeader()\n        head = Object.assign(head, appHeader)\n      }\n      wx.showNavigationBarLoading()\n      wx.uploadFile({\n        url: url,\n        name: fileKey,\n        filePath: filePath,\n        formData: data,\n        header: Object.assign(head, header),\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        },\n        complete() {\n          wx.hideNavigationBarLoading()\n        }\n      })\n    })\n  }\n}\n\n/**\n * socket用法：\n * let socketOpen = false\n * socket.connect(url)\n *\n * wx.onSocketMessage(res => {\n *  console.log(res)\n * }\n *\n * wx.onSocketOpen(res => {\n *  socketOpen = true\n *  if socketOpen: socket.send('hello').then((data) => {})\n *  socket.close(url) || wx.closeSocket()\n * })\n * @param {String} url\n * @param {JSON Object} handler\n * @param {JSON Object} data\n */\nconst socket = {\n  connect(url, handler = {}) {\n    const { header, protocols } = handler\n    let head = {\n      'content-type': 'application/json'\n    }\n    if (getApp().getHeader) {\n      const appHeader = getApp().getHeader()\n      head = Object.assign(head, appHeader)\n    }\n    return new Promise((resolve, reject) => {\n      wx.connectSocket({\n        url: url,\n        header: Object.assign(head, header),\n        protocols: typeof protocols === 'undefined' ? [] : protocols,\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        }\n      })\n    })\n  },\n\n  // 需在onSocketOpen回调内使用\n  send(data) {\n    return new Promise((resolve, reject) => {\n      wx.sendSocketMessage({\n        data: data,\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        }\n      })\n    })\n  },\n\n  close(url) {\n    wx.connectSocket({\n      url: url\n    })\n  }\n}\n\n/**\n * image用法：\n * 1.image.save(path).then(res => {})\n * 2.image.preview([url])\n * 3.image.choose(1).then(res => {})\n * @param {String} path\n * @param {JSON Object} urls\n */\nconst image = {\n  save(path) {\n    return new Promise((resolve, reject) => {\n      wx.saveImageToPhotosAlbum({\n        filePath: path,\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        }\n      })\n    })\n  },\n\n  preview(urls, current = urls[0], showmenu = true) {\n    return new Promise((resolve, reject) => {\n      wx.previewImage({\n        current,\n        urls,\n        showmenu,\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        }\n      })\n    })\n  },\n\n  choose(count = 9, sourceType = ['album', 'camera']) {\n    return new Promise((resolve, reject) => {\n      wx.chooseImage({\n        count: count,\n        sourceType: sourceType,\n        success: res => {\n          resolve(res)\n        },\n        fail: error => {\n          reject(error)\n        }\n      })\n    })\n  }\n}\n\n/**\n * showToast用法：\n * showToast('成功')\n * @param {String} title\n * @param {JSON Object} handler\n */\nconst showToast = (title, handler = {}) => {\n  const { icon, image, duration, mask } = handler\n  return new Promise((resolve, reject) => {\n    wx.showToast({\n      title: title,\n      image: image,\n      icon: typeof icon === 'undefined' ? 'none' : icon,\n      duration: typeof duration === 'undefined' ? 1000 : duration,\n      mask: typeof mask === 'undefined' ? true : mask,\n      success: res => {\n        resolve(res)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * showModal用法：\n * showModal('提示', '这是一个模态弹窗')\n * @param {String} title\n * @param {String} content\n * @param {JSON Object} handler\n */\nconst showModal = (title, content, handler = {}) => {\n  const { showCancel, cancelText, confirmText, cancelColor, confirmColor } =\n    handler\n  return new Promise((resolve, reject) => {\n    wx.showModal({\n      title: title,\n      content: content,\n      showCancel: typeof showCancel === 'undefined' ? true : showCancel,\n      cancelText: typeof cancelText === 'undefined' ? '取消' : cancelText,\n      confirmText: typeof confirmText === 'undefined' ? '确定' : confirmText,\n      cancelColor: typeof cancelColor === 'undefined' ? '#000000' : cancelColor,\n      confirmColor:\n        typeof confirmColor === 'undefined' ? '#576B95' : confirmColor,\n      success: res => {\n        resolve(res)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * showLoading用法：\n * showLoading('加载中')\n * @param {String} title\n * @param {Boolean} mask\n */\nconst showLoading = (title = '加载中...', mask = true) => {\n  return new Promise((resolve, reject) => {\n    wx.showLoading({\n      title: title,\n      mask: mask,\n      success: res => {\n        resolve(res)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * showActionSheet用法：\n * showActionSheet(['A', 'B', 'C']).then(res => {})\n * @param {Array.<String>} itemList\n * @param {String} itemColor\n */\nconst showActionSheet = (itemList, itemColor = '#000000') => {\n  return new Promise((resolve, reject) => {\n    wx.showActionSheet({\n      itemList: itemList,\n      itemColor: itemColor,\n      success: res => {\n        resolve(res.tapIndex)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * setStorage用法：\n * 1.setStorage('userInfo', userInfo)\n * 2.setStorage('userInfo', userInfo, 86400)\n * @param {String} key\n * @param {Object} value\n * @param {Int} time 过期时间，可选参数\n */\nconst setStorage = (key, value, time) => {\n  const dtime = '_deadtime'\n  wx.setStorageSync(key, value)\n  const seconds = parseInt(time)\n  if (seconds > 0) {\n    let timestamp = Date.parse(new Date()) / 1000 + seconds\n    wx.setStorageSync(key + dtime, timestamp + '')\n  } else {\n    wx.removeStorageSync(key + dtime)\n  }\n}\n\n/**\n * getStorage用法：\n * getStorage('userInfo')\n * @param {String} key\n */\nconst getStorage = key => {\n  const dtime = '_deadtime'\n  const deadtime = parseInt(wx.getStorageSync(key + dtime))\n  if (deadtime && Date.parse(new Date()) / 1000 > parseInt(deadtime)) {\n    wx.removeStorageSync(key)\n    wx.removeStorageSync(key + dtime)\n    return null\n  }\n  const res = wx.getStorageSync(key)\n  if (typeof res === 'boolean') {\n    return res\n  }\n  return res ? res : null\n}\n\n/**\n * getUserProfile用法：\n * getUserProfile().then(res => {})\n * @param {String} lang\n */\nconst getUserProfile = (lang = 'zh_CN', desc = '授权用于获取个人公开信息') => {\n  return new Promise((resolve, reject) => {\n    wx.getUserProfile({\n      lang: lang,\n      desc: desc,\n      success: res => {\n        resolve(res)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * 微信支付 - requestPayment用法:\n * requestPayment({timeStamp: timeStamp, nonceStr: nonceStr, packageValue: packageValue, paySign: paySign}).then(res => {})\n * @param {JSON Object} handler\n */\nconst requestPayment = handler => {\n  const { timeStamp, nonceStr, packageValue, paySign, signType } = handler\n  return new Promise((resolve, reject) => {\n    wx.requestPayment({\n      timeStamp: timeStamp,\n      nonceStr: nonceStr,\n      packageValue: packageValue,\n      paySign: paySign,\n      signType: typeof signType === 'undefined' ? 'MD5' : signType,\n      success: res => {\n        resolve(res)\n      },\n      fail: error => {\n        reject(error)\n      }\n    })\n  })\n}\n\n/**\n * 小程序自动更新 - autoUpdate用法:\n * autoUpdate()\n */\nconst autoUpdate = () => {\n  const updateManager = wx.getUpdateManager()\n  updateManager.onCheckForUpdate(res => {\n    if (res.hasUpdate) {\n      updateManager.onUpdateReady(() => {\n        showModal('更新提示', '新版本已经准备好，是否重启应用？').then(res => {\n          if (res.confirm) {\n            updateManager.applyUpdate()\n          }\n        })\n      })\n      updateManager.onUpdateFailed(() => {\n        showModal(\n          '更新提示',\n          '新版本已经准备好，请删除当前小程序，重新搜索打开'\n        )\n      })\n    }\n  })\n}\n\n/**\n * 判断字符串是否不为空 - isNotNull用法：\n * isNotNull('text')\n * @param {String} text 字符串\n * @return {Boolean} 字符串合法返回真否则返回假\n */\nconst isNotNull = text => {\n  if (text === null) {\n    return false\n  }\n  if (text.match(/^\\s+$/)) {\n    return false\n  }\n  if (text.match(/^\\s*$/)) {\n    return false\n  }\n  if (text.match(/^[ ]+$/)) {\n    return false\n  }\n  if (text.match(/^[ ]*$/)) {\n    return false\n  }\n  return true\n}\n\n/**\n * 获取日期时间 - getDateTime用法：\n * getDateTime()\n * @param {Date} date 'yy-mm-dd hh:MM:ss'\n */\nconst getDateTime = (date = new Date()) => {\n  var year = date.getFullYear()\n  var month = date.getMonth() + 1\n  var day = date.getDate()\n  var hour = date.getHours()\n  var minute = date.getMinutes()\n  var second = date.getSeconds()\n\n  if (month >= 1 && month <= 9) {\n    month = '0' + month\n  }\n  if (day >= 0 && day <= 9) {\n    day = '0' + day\n  }\n  if (hour >= 0 && hour <= 9) {\n    hour = '0' + hour\n  }\n  if (minute >= 0 && minute <= 9) {\n    minute = '0' + minute\n  }\n  if (second >= 0 && second <= 9) {\n    second = '0' + second\n  }\n  return (\n    year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second\n  )\n}\n\n/**\n * 获取时间戳 - getTimestamp用法：\n * getTimestamp()\n * @param {Date} date\n */\nconst getTimestamp = (date = new Date()) => {\n  return date.getTime()\n}\n\n/**\n * 精度计算 - calculate用法\n * 1.calculate.add(0.1, 0.2)\n * 2.calculate.sub(1, 0.8)\n * 3.calculate.mul(6, 0.7)\n * 4.calculate.div(1.2, 0.2)\n */\nconst calculate = {\n  add(num1, num2) {\n    let r1, r2, m\n    try {\n      r1 = num1.toString().split('.')[1].length\n    } catch (e) {\n      r1 = 0\n    }\n    try {\n      r2 = num2.toString().split('.')[1].length\n    } catch (e) {\n      r2 = 0\n    }\n    m = Math.pow(10, Math.max(r1, r2))\n    return (num1 * m + num2 * m) / m\n  },\n\n  sub(num1, num2) {\n    let r1, r2, m, n\n    try {\n      r1 = num1.toString().split('.')[1].length\n    } catch (e) {\n      r1 = 0\n    }\n    try {\n      r2 = num2.toString().split('.')[1].length\n    } catch (e) {\n      r2 = 0\n    }\n    m = Math.pow(10, Math.max(r1, r2))\n    n = r1 >= r2 ? r1 : r2\n    return ((num1 * m - num2 * m) / m).toFixed(n)\n  },\n\n  mul(num1, num2) {\n    let m = 0,\n      s1 = num1.toString(),\n      s2 = num2.toString()\n    try {\n      m += s1.split('.')[1].length\n    } catch (e) {}\n    try {\n      m += s2.split('.')[1].length\n    } catch (e) {}\n    return (\n      (Number(s1.replace('.', '')) * Number(s2.replace('.', ''))) /\n      Math.pow(10, m)\n    )\n  },\n\n  div(num1, num2) {\n    var t1 = 0,\n      t2 = 0,\n      r1,\n      r2\n    try {\n      t1 = num1.toString().split('.')[1].length\n    } catch (e) {}\n    try {\n      t2 = num2.toString().split('.')[1].length\n    } catch (e) {}\n    r1 = Number(num1.toString().replace('.', ''))\n    r2 = Number(num2.toString().replace('.', ''))\n    return (r1 / r2) * Math.pow(10, t2 - t1)\n  }\n}\n\n/**\n * 获取UUID - getUUID用法\n * getUUID()\n */\nconst getUUID = (hasOnline = true) => {\n  const s = []\n  const hexDigits = '0123456789abcdef'\n  for (let i = 0; i < 36; i++) {\n    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)\n  }\n  s[14] = '4'\n  s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1)\n  s[8] = s[13] = s[18] = s[23] = hasOnline ? '-' : ''\n  return s.join('')\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n  request,\n  file,\n  socket,\n  image,\n  showToast,\n  showModal,\n  showLoading,\n  showActionSheet,\n  setStorage,\n  getStorage,\n  getUserProfile,\n  requestPayment,\n  autoUpdate,\n  isNotNull,\n  getDateTime,\n  getTimestamp,\n  calculate,\n  getUUID\n};\n"]}